@page "/athletepage/{AthleteId}"

@inject MVC.Repository.Interface.IAthleteRepository _athleteRepository
@inject NavigationManager _navManager

<h3>Athlete</h3>


@if (Athlete != null)
{
    <div>
        @Athlete.Avatar
        @Athlete.FirstName  imię
        @Athlete.LastName   nazwisko
        @Athlete.Area   dziedzina: skoczek
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Competition</th>
                <th>Score 1</th>
                <th>Score 2</th>
                <th>Score 3</th>
                <th>Mark</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var competition in Athlete.Competition)
            {
            <tr>
                <td>@competition.Term</td>
                <td>@competition.Name</td>
                <td>@maxCompetitionScoreResult(competition.Id, 0)</td>
                <td>@maxCompetitionScoreResult(competition.Id, 1)</td>
                <td>@maxCompetitionScoreResult(competition.Id, 2)</td>
                <td>@maxCompetitionMarkResult(competition.Id, 0)</td>
            </tr>
            }
        </tbody>
    </table>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Competition</th>
                <th>Score</th>
                <th>Mark</th>
            </tr>
        </thead>
    </table>
}

<br />
<button type="submit" class="btn btn-primary" @onclick="OnCancel">Cancel</button>

@code {
    [Parameter]
    public string AthleteId { get; set; }

    private Athlete Athlete;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (Guid.TryParse(this.AthleteId, out Guid iAthleteId))
        {
            Athlete = _athleteRepository.FindFirstByCondition(iAthleteId);
        }
    }

    private string maxCompetitionScoreResult(Guid competitionId, int num)
    {
        var scores = _athleteRepository.GetScores(Athlete.Id, competitionId);        
        return scores.ToArray()[num].ToString();
    }

    private string maxCompetitionMarkResult(Guid competitionId, int num)
    {
        //TODO: ocena ma byc tylko jedna dla jednego competition
        var marks = _athleteRepository.GetMarks(Athlete.Id, competitionId);
        return marks.ToArray()[num].ToString();
    }

    private void OnCancel()
    {
        _navManager.NavigateTo("/trainerhome");
    }
}
